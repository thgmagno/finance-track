generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  password      String
  clusterId     String?         @map("cluster_id")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  cluster       Cluster[]
  ClusterInvite ClusterInvite[]

  @@map("users")
}

model Session {
  userId    String @unique @map("user_id")
  token     String
  timestamp Int

  @@map("sessions")
}

model Cluster {
  id            String          @id @default(cuid())
  name          String
  ownerId       String          @map("owner_id")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  ClusterInvite ClusterInvite[]
  Category      Category[]
  PaymentMethod Method[]
  Transaction   Transaction[]
  Installment   Installment[]

  owner  User     @relation(fields: [ownerId], references: [id])
  Saving Saving[]

  @@map("clusters")
}

model ClusterInvite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  status    String   @default("pending")
  clusterId String   @map("cluster_id")
  userId    String   @map("user_id")

  cluster Cluster @relation(fields: [clusterId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@map("cluster_invite")
}

model Category {
  id          String        @id @default(cuid())
  description String
  type        CategoryType
  clusterId   String        @map("cluster_id")
  transaction Transaction[]

  cluster Cluster  @relation(fields: [clusterId], references: [id], onDelete: Cascade)
  saving  Saving[]

  @@map("categories")
}

model Method {
  id          String @id @default(cuid())
  description String
  clusterId   String @map("cluster_id")

  cluster     Cluster       @relation(fields: [clusterId], references: [id], onDelete: Cascade)
  transaction Transaction[]

  @@map("method")
}

model Transaction {
  id          String            @id @default(cuid())
  description String
  amount      Float
  year        Int
  month       Int
  status      TransactionStatus @default(OPEN)
  categoryId  String            @map("category_id")
  clusterId   String            @map("cluster_id")
  methodId    String            @map("method_id")

  category    Category      @relation(fields: [categoryId], references: [id])
  cluster     Cluster       @relation(fields: [clusterId], references: [id], onDelete: Cascade)
  method      Method        @relation(fields: [methodId], references: [id])
  installment Installment[]

  @@map("transactions")
}

model Installment {
  id            String @id @default(cuid())
  counter       Int
  total         Int
  amount        Float
  year          Int
  month         Int
  clusterId     String @map("cluster_id")
  transactionId String @map("transaction_id")

  cluster     Cluster     @relation(fields: [clusterId], references: [id], onDelete: Cascade)
  transaction Transaction @relation(fields: [transactionId], references: [id])

  @@map("installment")
}

model Saving {
  id          String    @id @default(cuid())
  startAt     DateTime  @default(now()) @map("start_at")
  endAt       DateTime? @map("end_at")
  description String
  value       Float
  status      Boolean
  categoryId  String    @map("category_id")
  clusterId   String    @map("cluster_id")

  category Category @relation(fields: [categoryId], references: [id])
  cluster  Cluster  @relation(fields: [clusterId], references: [id], onDelete: Cascade)

  @@map("savings")
}

enum TransactionStatus {
  OPEN
  CLOSE
  OVERDUE
}

enum CategoryType {
  EXPENSE
  RECEIPT
  SAVING
}
